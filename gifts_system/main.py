import asyncio
import json
import logging
import os

from bs4 import BeautifulSoup  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
from playwright.async_api import async_playwright, Page, TimeoutError  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

from func_push_bot import push_bot_group_message, on_shutdown  # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram

# üìÇ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# üìÅ –§–∞–π–ª –¥–ª—è –∫–µ—à–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)
GIFTS_FILE = os.path.join(BASE_DIR, "gifts.txt")

# üíæ –§–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ Telegram Web
SESSION_FILE = os.path.join(BASE_DIR, "session.json")


# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–∞–∫ —á–∏—Å–ª–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
def save_gifts_count(count: int):
    with open(GIFTS_FILE, "w", encoding="utf-8") as f:
        f.write(str(count))


# üîÑ –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
def load_gifts_count() -> int:
    try:
        with open(GIFTS_FILE, "r", encoding="utf-8") as f:
            return int(f.read().strip())
    except (FileNotFoundError, ValueError):
        return 0  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –≤ —Ñ–∞–π–ª–µ –º—É—Å–æ—Ä


# üîÅ –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def click_with_retry(page: Page, selector: str, retries: int = 7, delay: float = 2.0) -> bool:
    for attempt in range(1, retries + 1):
        try:
            await page.wait_for_selector(selector, state="visible", timeout=5000)
            await page.click(selector)
            return True
        except TimeoutError:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: —ç–ª–µ–º–µ–Ω—Ç '{selector}' –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∏–ª–∏ –Ω–µ —Å—Ç–∞–ª –≤–∏–¥–∏–º—ã–º.")
        except Exception as e:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ '{selector}': {e}")

        if attempt < retries:
            await asyncio.sleep(delay)

    return False


# üéÅ –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—ç–ª–µ–º–µ–Ω—Ç—ã
async def parse_gifts(page):
    gifts = []
    try:
        # üîΩ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–∞—Ä–∫–æ–≤
        await page.click('#LeftMainHeader > div.DropdownMenu.main-menu > button')
        await page.wait_for_selector("div.Avatar.account-avatar", state="visible", timeout=10000)
        await page.click("div.Avatar.account-avatar")
        await page.click("text=Send a Gift", timeout=5000)

        # üñ± –ö–ª–∏–∫–∞–µ–º –ø–æ –Ω—É–∂–Ω–æ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
        success = await click_with_retry(page, "div.ripple-container", retries=7, delay=2.0)
        if not success:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É 'div.ripple-container', –≤–æ–∑–º–æ–∂–Ω–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –ø–æ—è–≤–∏–ª—Å—è.")
            return None

        await asyncio.sleep(5)  # ‚è≥ –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–¥–∞—Ä–∫–æ–≤
        txt = await page.content()  # –ü–æ–ª—É—á–∞–µ–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É

        # üßΩ –ü–∞—Ä—Å–∏–º HTML —Å –ø–æ–º–æ—â—å—é BeautifulSoup
        soup = BeautifulSoup(txt, 'lxml').find_all('div', class_='G1mBmzxs f5ArEO1S starGiftItem')
        gifts = soup  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

    except Exception as ex:
        print(f'‚ùå –û—à–∏–±–∫–∞ –≤ parse_gifts: {ex}')
        return None

    return gifts


# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
async def main():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s | %(levelname)-8s | %(message)s',
        handlers=[logging.StreamHandler()]
    )
    logger = logging.getLogger(__name__)

    async with async_playwright() as p:
        # üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ headless-—Ä–µ–∂–∏–º–µ (–±–µ–∑ GUI)
        browser = await p.chromium.launch(headless=True,
                                          args=[
                                              "--disable-blink-features=AutomationControlled",
                                              "--no-sandbox",
                                              "--disable-infobars",
                                              "--window-size=1920,1080",
                                          ])
        # üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª session.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        context = await browser.new_context(storage_state=SESSION_FILE if os.path.exists(SESSION_FILE) else None)
        page = await context.new_page()

        await page.goto("https://web.telegram.org/a/")

        # üë§ –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç ‚Äî –æ–∂–∏–¥–∞–µ–º —Ä—É—á–Ω–æ–π –≤—Ö–æ–¥
        if not os.path.exists(SESSION_FILE):
            input("üëâ –í–æ–π–¥–∏ –≤ Telegram –≤—Ä—É—á–Ω—É—é –∏ –Ω–∞–∂–º–∏ Enter.")
            await context.storage_state(path=SESSION_FILE)

        # üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
        while True:
            try:
                await asyncio.sleep(3)

                current_gifts = await parse_gifts(page)
                if current_gifts is None:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                    await page.reload()
                    await asyncio.sleep(5)
                    continue

                current_count = len(current_gifts)
                print(current_count)
                previous_count = load_gifts_count()
                print(previous_count)
                await push_bot_group_message(f'–î–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞: {current_gifts}'
                                             f'\n–î–∞–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å: {previous_count}')

                if current_count != previous_count:
                    diff = current_count - previous_count
                    if diff > 0:
                        msg = f"üéâ –ü–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {diff} —à—Ç."
                    else:
                        msg = f"‚ùó –ü–æ–¥–∞—Ä–∫–æ–≤ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ –Ω–∞ {-diff} —à—Ç."

                    await push_bot_group_message(msg)
                    logger.info(msg)
                    save_gifts_count(current_count)
                else:
                    logger.info("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")

                await asyncio.sleep(15)
                await page.reload()

            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
                logger.info("–û–±–Ω–æ–≤–ª—è—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é...")
                try:
                    await page.reload()
                except Exception as reload_ex:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {reload_ex}", exc_info=True)
                await asyncio.sleep(10)


# ‚è± –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç
if __name__ == "__main__":
    asyncio.run(main())
    asyncio.run(on_shutdown())  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
