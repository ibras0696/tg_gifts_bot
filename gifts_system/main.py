import asyncio
import json
import logging
import os

from bs4 import BeautifulSoup
from playwright.async_api import async_playwright, Page, TimeoutError

from func_push_bot import push_bot_group_message, on_shutdown

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
GIFTS_FILE = os.path.join(BASE_DIR, "gifts_cache.json")
SESSION_FILE = os.path.join(BASE_DIR, "session.json")


def save_gifts(data):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ JSON —Ñ–∞–π–ª.

    Args:
        data (list): –°–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥–∞—Ä–∫–æ–≤.
    """
    with open(GIFTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


def load_gifts():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞.

    Returns:
        list: –°–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫,
              –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å.
    """
    try:
        with open(GIFTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []


async def click_with_retry(page: Page, selector: str, retries: int = 7, delay: float = 2.0) -> bool:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.

    Args:
        page (Page): –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Playwright.
        selector (str): CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞.
        retries (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
        delay (float): –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.

    Returns:
        bool: True –µ—Å–ª–∏ –∫–ª–∏–∫ —É—Å–ø–µ—à–µ–Ω, False –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å.
    """
    for attempt in range(1, retries + 1):
        try:
            await page.wait_for_selector(selector, state="visible", timeout=5000)
            await page.click(selector)
            return True
        except TimeoutError:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: —ç–ª–µ–º–µ–Ω—Ç '{selector}' –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∏–ª–∏ –Ω–µ —Å—Ç–∞–ª –≤–∏–¥–∏–º—ã–º.")
        except Exception as e:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ '{selector}': {e}")

        if attempt < retries:
            await asyncio.sleep(delay)

    return False


async def parse_gifts(page):
    gifts = set()
    try:
        await page.click('#LeftMainHeader > div.DropdownMenu.main-menu > button')
        await page.wait_for_selector("div.Avatar.account-avatar", state="visible", timeout=10000)
        await page.click("div.Avatar.account-avatar")
        await page.click("text=Send a Gift", timeout=5000)

        # –ö–ª–∏–∫–∞–µ–º –ø–æ "div.ripple-container" —Å retry
        success = await click_with_retry(page, "div.ripple-container", retries=7, delay=2.0)
        if not success:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É 'div.ripple-container', –≤–æ–∑–º–æ–∂–Ω–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –ø–æ—è–≤–∏–ª—Å—è.")
            return None

        await asyncio.sleep(5)  # –∂–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–¥–∞—Ä–∫–æ–≤
        txt = await page.content()

        soup = BeautifulSoup(txt, 'lxml').find_all('div', class_='G1mBmzxs f5ArEO1S starGiftItem')
        for idx, gift_div in enumerate(soup):
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (—á–∏—Å–ª–æ —Ä—è–¥–æ–º —Å –∏–∫–æ–Ω–∫–æ–π)
            button = gift_div.find('button', class_='Button')
            star_count = None
            if button:
                # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ <i> —Å –∫–ª–∞—Å—Å–æ–º star-amount-icon ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ –∑–≤—ë–∑–¥
                star_icon = button.find('i', class_='star-amount-icon')
                if star_icon:
                    # –í–æ–∑—å–º—ë–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ —É–±–µ—Ä—ë–º —Å–∏–º–≤–æ–ª—ã –∑–≤—ë–∑–¥
                    text = button.get_text(strip=True)
                    # –û—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    digits = ''.join(filter(str.isdigit, text))
                    if digits.isdigit():
                        star_count = int(digits)

            # –ü–æ–ª—É—á–∞–µ–º alt —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            img = gift_div.find('img')
            alt_text = img.get('alt', '') if img else ''

            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø–æ–¥–∞—Ä–∫–∞
            unique_key = (alt_text, star_count)
            # –ï—Å–ª–∏ alt –ø—É—Å—Ç–æ–π, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å, –Ω–æ –ª—É—á—à–µ, –µ—Å–ª–∏ –±—É–¥–µ—Ç –∫–∞–∫–æ–π-—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç
            if not alt_text:
                unique_key = (f"gift_idx_{idx}", star_count)

            gifts.add(unique_key)

    except Exception as ex:
        print(f'‚ùå –û—à–∏–±–∫–∞ –≤ parse_gifts: {ex}')
        return None
    return gifts


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s | %(levelname)-8s | %(message)s',
        handlers=[logging.StreamHandler()]
    )
    logger = logging.getLogger(__name__)

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True,
                                          args=[
                                              "--disable-blink-features=AutomationControlled",
                                              "--no-sandbox",
                                              "--disable-infobars",
                                              "--window-size=1920,1080",
                                          ])
        context = await browser.new_context(storage_state=SESSION_FILE if os.path.exists(SESSION_FILE) else None)
        page = await context.new_page()

        await page.goto("https://web.telegram.org/a/")

        if not os.path.exists(SESSION_FILE):
            input("üëâ –í–æ–π–¥–∏ –≤ Telegram –≤—Ä—É—á–Ω—É—é –∏ –Ω–∞–∂–º–∏ Enter.")
            await context.storage_state(path=SESSION_FILE)

        while True:
            try:
                await asyncio.sleep(3)

                current_gifts = await parse_gifts(page)

                if current_gifts is None:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                    await page.reload()
                    await asyncio.sleep(5)
                    continue

                old_gifts_raw = load_gifts()
                old_gifts = set(tuple(item) for item in old_gifts_raw)

                if len(current_gifts) != len(old_gifts):
                    diff = len(current_gifts) - len(old_gifts)
                    if diff > 0:
                        msg = f"üéâ –ü–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {diff} —à—Ç."
                        await push_bot_group_message(msg)
                        logger.info(msg)
                    else:
                        msg = f"‚ùó –ü–æ–¥–∞—Ä–∫–æ–≤ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ –Ω–∞ {-diff} —à—Ç."
                        await push_bot_group_message(msg)
                        logger.info(msg)
                    save_gifts([list(item) for item in current_gifts])
                else:
                    logger.info("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")

                await asyncio.sleep(15)
                await page.reload()

            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
                logger.info("–û–±–Ω–æ–≤–ª—è—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é...")
                try:
                    await page.reload()
                except Exception as reload_ex:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {reload_ex}", exc_info=True)
                await asyncio.sleep(10)


if __name__ == "__main__":
    asyncio.run(main())
    asyncio.run(on_shutdown())

# –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å chat gpt –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ –ø–∏—Å–∞–ª
# https://chatgpt.com/c/688014ab-7ca8-832f-8894-6ed1be687175
