import traceback
import logging
from typing import Callable, Dict, Any, Awaitable
from datetime import datetime

from aiogram.enums import ChatMemberStatus
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Update, Message, ChatMemberUpdated, CallbackQuery
from aiogram import BaseMiddleware, Bot

from database import CrudeSubscriptions
from config import ADMIN_IDS, GRPS


class ErrorMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –æ—à–∏–±–æ–∫ –≤ Aiogram 3.
    –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:
    - –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å;
    - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É;
    - –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """

    async def __call__(
        self,
        handler: Callable[[Update, dict], Awaitable[Any]],
        event: Update,
        data: dict
    ) -> Any:
        try:
            return await handler(event, data)

        except Exception as e:
            bot: Bot = data.get("bot")
            tb = traceback.format_exc()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {tb}")

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º Telegram ID
            telegram_id = None
            telegram_name = None
            if event.message:
                telegram_id = event.message.from_user.id
                telegram_name = event.message.from_user.username
            elif event.callback_query:
                telegram_id = event.callback_query.from_user.id
                telegram_name = event.callback_query.from_user.username
            elif event.inline_query:
                telegram_id = event.inline_query.from_user.id
                telegram_name = event.inline_query.from_user.username

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            now = datetime.now()

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            formatted_time = now.strftime("%H:%M %d.%m.%Y")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
            if bot:
                try:
                    for tg_id in ADMIN_IDS:
                        await bot.send_message(
                            chat_id=tg_id,
                            text=f"‚ùå –û—à–∏–±–∫–∞!"
                                 f"\n–¢–µ–ª–µ–≥—Ä–∞–º ID: {telegram_id}"
                                 f"\n–¢–µ–ª–µ–≥—Ä–∞–º –ù–∏–∫: {telegram_name}"
                                 f"\n–í—Ä–µ–º—è: {formatted_time}"
                                 f"\n\n<b>{type(e).__name__}:</b> {e}\n\n<pre>{tb[-700:-1]}</pre>",
                            parse_mode="HTML"
                        )
                except Exception as ex:
                    print(f'–û—à–∏–±–∫: {ex}')


class SubscriptionMiddleware(BaseMiddleware):
    def __init__(self):
        self.group_tariffs = GRPS  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤–µ–∑–¥–µ

    async def __call__(
        self,
        handler: Callable,
        event: Any,
        data: Dict[str, Any]
    ) -> Any:
        bot: Bot = data['bot']
        chat_id = None
        user_id = None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if isinstance(event, Message):
            chat_id = str(event.chat.id)
            user_id = event.from_user.id

        elif isinstance(event, ChatMemberUpdated):
            if event.old_chat_member.status == ChatMemberStatus.LEFT and \
               event.new_chat_member.status == ChatMemberStatus.MEMBER:
                chat_id = str(event.chat.id)
                user_id = event.new_chat_member.user.id
            else:
                return await handler(event, data)

        elif isinstance(event, CallbackQuery) and event.message:
            chat_id = str(event.message.chat.id)
            user_id = event.from_user.id

        else:
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –≤ –Ω—É–∂–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
        if chat_id in self.group_tariffs:
            try:
                subscription = await CrudeSubscriptions().check_subscription(user_id)

                if not subscription or subscription.day_count <= 0:
                    try:
                        await bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
                        await bot.unban_chat_member(chat_id=chat_id, user_id=user_id)
                        logging.info(f"‚ùå {user_id} –∫–∏–∫–Ω—É—Ç –∏–∑ {chat_id}, –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                        for admin_id in ADMIN_IDS:
                            await bot.send_message(
                                admin_id,
                                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}\n"
                                f"üìã –ü—Ä–∏—á–∏–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
                            )
                    except TelegramBadRequest as e:
                        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ {chat_id}: {e}")

            except Exception as e:
                logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

        return await handler(event, data)
