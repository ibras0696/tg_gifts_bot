from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config import TOKEN_BOT
from database import CrudeSubscriptions
from utils.message_texts import push_subs_text, end_push_sub_text


# –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_tg = Bot(token=TOKEN_BOT, parse_mode="HTML")  # –£–∫–∞–∂–∏ parse_mode, –µ—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ


# –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
async def users_push_subs(bot: Bot = bot_tg):
    db = CrudeSubscriptions()

    # 1. –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        ending_subs = await db.get_all_users_subscriptions()
        for sub in ending_subs:
            if sub.day_count == 1:
                try:
                    await bot.send_message(sub.telegram_id, await end_push_sub_text())
                except Exception as e:
                    print(f"[‚ùå] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ end_push: {e}")
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

    # 2. –£–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
    try:
        subs = await db.all_reduce_subscriptions()
        for sub in subs:
            if 0 < sub.day_count < 3:
                try:
                    await bot.send_message(sub.telegram_id, await push_subs_text(sub.day_count))
                except Exception as e:
                    print(f"[‚ùå] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push_subs_text: {e}")
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–µ–¥—É–ª–µ—Ä–∞
def setup_scheduler(hour: int = 0, minute: int = 0) -> AsyncIOScheduler:
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

    scheduler.add_job(
        users_push_subs,
        trigger=CronTrigger(hour=hour, minute=minute),
        id="reduce_subs",
        replace_existing=True,
    )

    scheduler.start()
    print(f"üìÖ –®–µ–¥—É–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {hour:02d}:{minute:02d} –ø–æ –ú–°–ö")
    return scheduler
