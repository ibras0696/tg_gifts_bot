import asyncio
import logging
from aiogram import Dispatcher, Bot
from aiogram.exceptions import TelegramBadRequest

from config import TOKEN_BOT
from middlewares import ErrorMiddleware
from database import init_db
from handlers import router
from utils import setup_scheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)

# –≠–∫–∑–µ–º–ø–ª—è—Ä—ã
bot = Bot(token=TOKEN_BOT, parse_mode="HTML")  # parse_mode –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
dp = Dispatcher()


async def main():
    logging.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    logging.info("üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    setup_scheduler()

    # –ú–∏–¥–ª–≤–∞—Ä–∏
    dp.update.middleware(ErrorMiddleware())

    # –†–æ—É—Ç–µ—Ä—ã
    dp.include_router(router)

    # –°–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞, –µ—Å–ª–∏ –±—ã–ª
    await bot.delete_webhook(drop_pending_updates=True)

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except TelegramBadRequest as e:
        logging.error(f"Telegram API error: {e}")
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.critical("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", exc_info=e)
